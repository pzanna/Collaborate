[tool:pytest]
# Pytest configuration for SERVICE_NAME_PLACEHOLDER service

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    # Output options
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    
    # Coverage options
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=80
    
    # Test execution options
    --durations=10
    --maxfail=5
    
    # Async support
    --asyncio-mode=auto
    
    # Plugin options
    --html=reports/report.html
    --self-contained-html
    --junitxml=reports/junit.xml

# Async settings
asyncio_mode = auto

# Test markers
markers =
    unit: Unit tests that don't require external dependencies
    integration: Integration tests that may require external services
    slow: Tests that take a long time to run
    external: Tests that require external APIs or services
    database: Tests that require database connection
    mcp: Tests that require MCP server connection
    auth: Tests related to authentication and authorization
    api: API endpoint tests
    health: Health check related tests
    config: Configuration related tests
    security: Security related tests
    performance: Performance and load tests
    smoke: Basic smoke tests
    regression: Regression tests
    flaky: Tests that may be unstable

# Filter warnings
filterwarnings =
    # Ignore specific warnings
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    
    # Convert specific warnings to errors
    error::RuntimeWarning
    
    # Specific library warnings to ignore
    ignore:.*imp module.*:DeprecationWarning
    ignore:.*distutils.*:DeprecationWarning
    ignore:.*pkg_resources.*:DeprecationWarning

# Log settings
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution
# addopts = --numprocesses=auto  # Uncomment to enable parallel execution

# Environment variables for testing
env = 
    SERVICE_ENVIRONMENT = test
    SERVICE_DEBUG = true
    LOG_LEVEL = DEBUG
    DATABASE_URL = sqlite:///:memory:
    MCP_SERVER_URL = ws://localhost:8081
    CONFIG_FILE = config/test_config.json

# Directories to ignore
norecursedirs = 
    .git
    .tox
    .env
    dist
    build
    *.egg
    htmlcov
    .pytest_cache
    __pycache__
    .mypy_cache
    .coverage
    node_modules
    venv
    .venv

# Test collection
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Doctest options
doctest_optionflags = 
    NORMALIZE_WHITESPACE
    IGNORE_EXCEPTION_DETAIL
    ELLIPSIS

# Cache directory
cache_dir = .pytest_cache
