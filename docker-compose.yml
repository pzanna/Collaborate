# Eunice Research Platform - Re-architected
# Core microservices architecture following the new design document

services:
  # Core Services

  # API Gateway Service (Port 8001) - Only HTTP endpoint for clients
  api-gateway:
    build:
      context: ./api-gateway
      target: production
    container_name: eunice-api-gateway
    ports:
      - "8001:8001"
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/eunice
      - LOG_LEVEL=INFO
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    networks:
      - eunice-microservices
    depends_on:
      - postgres
    restart: unless-stopped

  # Research Manager (Port 8010) - Research coordination
  research-manager:
    build:
      context: ./research-manager
      target: production
    container_name: eunice-research-manager
    ports:
      - "8002:8002"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8002
      - AGENT_TYPE=research_manager
      - LOG_LEVEL=INFO
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    networks:
      - eunice-microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Supporting Services

  # Database Service (Port 8000) - Database interface service
  database-service:
    build:
      context: ./database
      target: production
    container_name: eunice-database-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/eunice
      - LOG_LEVEL=INFO
      - HEALTH_CHECK_INTERVAL=30
      - MAINTENANCE_INTERVAL=3600
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    networks:
      - eunice-microservices
    depends_on:
      - postgres
    restart: unless-stopped

  # Network Service (Port 8010) - Handles network operations and connections
  network-service:
    build:
      context: ./network
      target: production
    container_name: eunice-network-service
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
      - LOG_LEVEL=INFO
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    networks:
      - eunice-microservices
    restart: unless-stopped

  # Memory Service (Port 8009) - Handles memory and cache operations
  memory-service:
    build:
      context: ./memory
      target: production
    container_name: eunice-memory-service
    ports:
      - "8009:8009"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8009
      - LOG_LEVEL=INFO
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    networks:
      - eunice-microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Auth Service (Port 8013) - User authentication and access control
  auth-service:
    build:
      context: ./auth-service
      target: production
    container_name: eunice-auth-service
    ports:
      - "8013:8013"
    environment:
      - HOST=0.0.0.0
      - PORT=8013
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/eunice
      - SECRET_KEY=${AUTH_SECRET_KEY:-generate-a-secure-key}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - DEBUG=false
      - DOCKER_HOST=tcp://docker-socket-proxy:2375
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:5174,http://localhost:5175,http://localhost:5176,http://localhost:8001,http://127.0.0.1:5176
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONNOUSERSITE=1
    volumes:
      - auth-uploads:/app/uploads
    networks:
      - eunice-microservices
    depends_on:
      - postgres
      - docker-socket-proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Docker Socket Proxy - Security layer for Docker API access
  docker-socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:latest
    container_name: eunice-docker-socket-proxy
    environment:
      - LOG_LEVEL=info
      - CONTAINERS=1
      - SERVICES=1
      - NETWORKS=1
      - VOLUMES=1
      - IMAGES=1
      - INFO=1
      - VERSION=1
      - PING=1
      - EVENTS=1
      - EXEC=0
      - SYSTEM=0
      - BUILD=0
      - COMMIT=0
      - POST=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - eunice-microservices
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /run
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:2375/_ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Supporting Infrastructure

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eunice-postgres
    ports:
      - "5433:5432" # Use different external port to avoid conflict
    environment:
      - POSTGRES_DB=eunice
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - eunice-microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Tools (Optional)

  # Nginx (Load Balancer/Reverse Proxy + Frontend)
  nginx:
    image: nginx:alpine
    container_name: eunice-nginx
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - eunice-microservices
    depends_on:
      - api-gateway
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  eunice-microservices:
    driver: bridge
    name: eunice-microservices
    labels:
      - "com.eunice.network=microservices"
      - "com.eunice.version=re-architected"

# Volumes
volumes:
  postgres-data:
    name: eunice-postgres-data
    labels:
      - "com.eunice.volume=database"
  auth-uploads:
    name: eunice-auth-uploads
    labels:
      - "com.eunice.volume=auth-uploads"
