#!/usr/bin/env python3
"""
Simple Research Test - User creates topic, Research Manager handles everything

This test demonstrates the intended workflow:
1. User creates a project (optional)
2. User creates a topic with research query
3. Research Manager automatically handles:
   - Creating research plans
   - Breaking down into tasks
   - Executing with AI agents
   - Generating comprehensive results
"""

import json
import time
import requests
from urllib.parse import quote
from typing import Optional, Dict, Any, Tuple

# Constants
API_URL = "http://localhost:8000/api/v2"
SUCCESS_STATUS = 200


def make_request(method: str, endpoint: str, json_data: Optional[Dict[str, Any]] = None) -> Tuple[bool, Optional[Dict[str, Any]], str]:
    """Make HTTP request to the API."""
    url = f"{API_URL}/{endpoint.lstrip('/')}"
    
    try:
        response = requests.request(method, url, json=json_data)
        
        if response.status_code == SUCCESS_STATUS:
            return True, response.json(), ""
        else:
            error_msg = f"Request failed with status {response.status_code}: {response.text}"
            return False, None, error_msg
            
    except requests.RequestException as e:
        error_msg = f"Request error: {str(e)}"
        return False, None, error_msg


def create_project(name: str, description: str) -> Tuple[bool, Optional[str]]:
    """Create a research project."""
    project_data = {"name": name, "description": description}
    success, response_data, error_msg = make_request("POST", "/projects", project_data)
    
    if success and response_data:
        project_id = response_data.get("id")
        print(f"✅ Project '{name}' created successfully.")
        print(f"   Project ID: {project_id}")
        return True, project_id
    else:
        print(f"❌ Failed to create project: {error_msg}")
        return False, None


def create_topic(project_id: str, name: str, description: str) -> Tuple[bool, Optional[str]]:
    """Create a research topic."""
    topic_data = {"name": name, "description": description}
    success, response_data, error_msg = make_request(
        "POST", f"/projects/{project_id}/topics", topic_data
    )
    
    if success and response_data:
        topic_id = response_data.get("id")
        print(f"✅ Research topic '{name}' created successfully.")
        print(f"   Topic ID: {topic_id}")
        return True, topic_id
    else:
        print(f"❌ Failed to create research topic: {error_msg}")
        return False, None


def start_research(topic_id: str, query: str) -> Tuple[bool, Optional[Dict[str, Any]]]:
    """Start research on a topic - Research Manager handles everything."""
    success, response_data, error_msg = make_request(
        "POST", f"/topics/{topic_id}/research?query={quote(query)}"
    )
    
    if success and response_data:
        print("🚀 Research started successfully!")
        print(f"   Research Task ID: {response_data.get('research_task_id')}")
        print(f"   Query: {response_data.get('query')}")
        return True, response_data
    else:
        print(f"❌ Failed to start research: {error_msg}")
        return False, None


def get_topic_with_research_results(topic_id: str) -> Optional[Dict[str, Any]]:
    """Get topic with all generated research results."""
    success, response_data, error_msg = make_request("GET", f"/topics/{topic_id}")
    
    if success and response_data:
        return response_data
    else:
        print(f"❌ Failed to get topic: {error_msg}")
        return None


def get_research_plan_details(topic_id: str) -> Optional[Dict[str, Any]]:
    """Get the detailed research plan generated by AI agents."""
    # First get the topic to find the plans
    topic = get_topic_with_research_results(topic_id)
    if not topic:
        return None
    
    # Get the plans for this topic
    success, response_data, error_msg = make_request("GET", f"/topics/{topic_id}/plans")
    
    if success and response_data and isinstance(response_data, list) and len(response_data) > 0:
        # Get the first (most recent) plan
        plan = response_data[0]
        plan_id = plan.get('id')
        
        # Get detailed plan information
        plan_success, plan_data, plan_error = make_request("GET", f"/plans/{plan_id}")
        
        if plan_success and plan_data:
            return plan_data
        else:
            print(f"❌ Failed to get plan details: {plan_error}")
            return None
    else:
        print(f"❌ Failed to get plans for topic: {error_msg}")
        return None


def approve_research_plan(plan_id: str) -> bool:
    """Approve the research plan."""
    success, response_data, error_msg = make_request("POST", f"/plans/{plan_id}/approve")

    if success and response_data:

        return True
    else:
        print(f"❌ Failed to approve research plan: {error_msg}")
        return False
    

def run_simple_research_test():
    """Run the simple research test."""
    print("🧪 Simple Research Test - Research Manager Handles Everything")
    print("=" * 70)
    print("📝 Workflow:")
    print("   1. User creates a project")
    print("   2. User creates a topic")
    print("   3. User starts research with a query")
    print("   4. Research Manager automatically:")
    print("      • Creates comprehensive research plans")
    print("      • Breaks down into specific tasks")
    print("      • Executes with AI planning agents")
    print("      • Generates detailed research structure")
    print("=" * 70)
    
    # Test data
    project_name = "Biological AI Research Project"
    project_description = "Replacing ANN with Biological Neural Networks"
    topic_name = "Culturing Biological Neural Networks"
    topic_description = "Exploring the potential of culturing biological neural networks"
    research_query = "What are the computational models for simulating neural networks inspired by biological systems?"

    # Step 1: Create Project
    print("\n📁 Step 1: Creating research project...")
    project_success, project_id = create_project(project_name, project_description)
    
    if not project_success or not project_id:
        print("❌ Test failed: Cannot proceed without a valid project.")
        return
    
    # Step 2: Create Topic
    print("\n📝 Step 2: Creating research topic...")
    topic_success, topic_id = create_topic(project_id, topic_name, topic_description)
    
    if not topic_success or not topic_id:
        print("❌ Test failed: Cannot proceed without a valid topic.")
        return
    
    # Step 3: Start Research (Research Manager handles everything from here)
    print("\n🚀 Step 3: Starting research...")
    print(f"Research Query: {research_query}")
    print("💡 From this point, the Research Manager handles:")
    print("   • Plan creation and structure")
    print("   • Task breakdown and execution")
    print("   • AI agent coordination")
    print("   • Result synthesis")
    
    research_success, research_data = start_research(topic_id, research_query)
    
    if not research_success:
        print("❌ Test failed: Could not start research.")
        return
    
    # Step 4: Wait and check results
    print("\n⏳ Step 4: Waiting for research completion...")
    time.sleep(15)  # Give the research manager time to work

    # Step 5: Get research plan details
    print("\n📊 Step 5: Retrieving research Plan...")
    topic_with_results = get_topic_with_research_results(topic_id)
    
    if topic_with_results:
        print("✅ Research completed! Here's what the Research Manager created:")
        print(f"   • Topic: {topic_with_results.get('name')}")
        print(f"   • Plans Created: {topic_with_results.get('plans_count', 0)}")
        print(f"   • Tasks Created: {topic_with_results.get('tasks_count', 0)}")
        print(f"   • Status: {topic_with_results.get('status')}")
        print(f"   • Total Cost: ${topic_with_results.get('total_cost', 0):.4f}")
        
        # Get and display the detailed research plan
        print("\n� Step 6: Retrieving AI-generated research plan details...")
        plan_details = get_research_plan_details(topic_id)
        
        if plan_details:
            plan_structure = plan_details.get('plan_structure', {})
            if isinstance(plan_structure, str):
                import json
                try:
                    plan_structure = json.loads(plan_structure)
                except json.JSONDecodeError:
                    plan_structure = {}
            
            print("📋 AI-Generated Research Plan:")
            print("=" * 50)
            
            # Display objectives
            objectives = plan_structure.get('objectives', [])
            if objectives:
                print(f"\n🎯 Research Objectives ({len(objectives)}):")
                for i, obj in enumerate(objectives, 1):
                    print(f"   {i}. {obj}")
            
            # Display key areas
            key_areas = plan_structure.get('key_areas', [])
            if key_areas:
                print(f"\n🔬 Key Research Areas ({len(key_areas)}):")
                for i, area in enumerate(key_areas, 1):
                    print(f"   {i}. {area}")
            
            # Display research questions
            questions = plan_structure.get('questions', [])
            if questions:
                print(f"\n❓ Research Questions ({len(questions)}):")
                for i, question in enumerate(questions, 1):
                    print(f"   {i}. {question}")
            
            # Display sources
            sources = plan_structure.get('sources', [])
            if sources:
                print(f"\n📚 Information Sources ({len(sources)}):")
                for i, source in enumerate(sources, 1):
                    print(f"   {i}. {source}")
            
            # Display expected outcomes
            outcomes = plan_structure.get('outcomes', [])
            if outcomes:
                print(f"\n🎁 Expected Outcomes ({len(outcomes)}):")
                for i, outcome in enumerate(outcomes, 1):
                    print(f"   {i}. {outcome}")
            
            print("=" * 50)
            # Plan id
            plan_id = plan_details.get('id')
        else:
            print("⚠️  Could not retrieve detailed research plan")
            
    else:
        print("❌ Failed to retrieve research results.")
        return

    # Step 6. Approve research plan
    print("\n✅ Approving research plan...")
    if plan_id:
        # approved = approve_research_plan(plan_id)
        approved = None
    else:
        print("❌ No plan ID available to approve.")
        return
    if approved:
        print("✅ Research plan approved successfully!")
    else:
        print("❌ Failed to approve research plan.")
        return

    # Step 7: Task assignments
    print("\n📋 Step 7: Assigning tasks from research plan")






    

    # Final summary
    # Success!
    print("\n✅ AI Research Platform Test Completed Successfully!")
    print("=" * 60)
    print("🎉 Summary:")
    print(f"   • Project: {project_name}")
    print(f"   • Topic: {topic_name}")
    print(f"   • Query: {research_query[:50]}...")
    print("   • Research Manager: ✅ Handled all planning and execution")
    print("   • AI Planning Agent: ✅ Generated comprehensive research structure")
    print("   • Detailed Plan: ✅ Objectives, areas, questions, sources, outcomes")
    print("   • User Effort: ✅ Minimal - just created topic and query!")
    print("\n💡 The AI agents transformed a simple query into a detailed research strategy!")
    print("=" * 60)


if __name__ == "__main__":
    try:
        run_simple_research_test()
    except KeyboardInterrupt:
        print("\n⚠️  Test interrupted by user.")
    except Exception as e:
        print(f"❌ Test failed with error: {str(e)}")
